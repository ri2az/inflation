import pandas as pd
import streamlit as st
import requests
from bs4 import BeautifulSoup
import re
import matplotlib.pyplot as plt
import plotly.express as px

# -------------------- CONFIG --------------------
st.set_page_config(page_title="SP95 vs Inflation", layout="wide")
st.title("üìä Comparaison : Prix SP95 vs Inflation (IPC, IPCH, ISJ)")

# -------------------- 1. Charger SP95 --------------------
CSV_SP95 = "prix_sp95_nettoye.csv"

@st.cache_data
def fetch_sp95_data():
    df = pd.read_csv(CSV_SP95)
    df["Date"] = pd.to_datetime(df["Date"])
    df["Prix"] = pd.to_numeric(df["Prix"], errors="coerce")
    return df.dropna().sort_values("Date")

df_sp95 = fetch_sp95_data()

# -------------------- 2. Charger indices INSEE --------------------
@st.cache_data
def fetch_textual_inflation_data():
    URL = "https://www.insee.fr/fr/statistiques/8558558#tableau-ipc-g1-fr"
    headers = {'User-Agent': 'Mozilla/5.0'}
    r = requests.get(URL, headers=headers)
    soup = BeautifulSoup(r.text, 'html.parser')
    raw_text = soup.get_text()

    pattern = re.compile(r'(\d{4}-\d{2})\s+([\d\.\-]+)\s+([\d\.\-]+)\s+([\d\.\-]+)')
    matches = pattern.findall(raw_text)

    df = pd.DataFrame(matches, columns=["Date", "IPCH", "ISJ", "IPC"])
    df["Date"] = pd.to_datetime(df["Date"])
    df[["IPCH", "ISJ", "IPC"]] = df[["IPCH", "ISJ", "IPC"]].astype(float)
    return df.sort_values("Date")

df_inflation = fetch_textual_inflation_data()

# -------------------- 3. Fusion --------------------
df_merged = pd.merge(df_inflation, df_sp95, on="Date", how="inner")

# -------------------- 4. Interface utilisateur --------------------
st.sidebar.header("üéõÔ∏è Options d'affichage")

selected_curves = st.sidebar.multiselect(
    "Courbes √† afficher :",
    ["SP95", "IPC", "IPCH", "ISJ"],
    default=["SP95", "IPC"]
)

normalize = st.sidebar.checkbox("üîÅ Normaliser en base 100", value=False)

graph_style = st.sidebar.radio("üñåÔ∏è Style de graphique :", ["üìà Interactif (Plotly)", "‚úèÔ∏è Style XKCD (matplotlib)"])

# üìÜ Filtrage par ann√©es
all_years = sorted(df_merged["Date"].dt.year.unique())
selected_years = st.sidebar.multiselect(
    "üìÜ Filtrer par ann√©e(s) :",
    all_years,
    default=all_years[-5:]
)

# Appliquer le filtre ann√©e
df_plot = df_merged[df_merged["Date"].dt.year.isin(selected_years)].copy()

# -------------------- 5. Pr√©parer les donn√©es --------------------
column_mapping = {
    "SP95": "Prix",
    "IPC": "IPC",
    "IPCH": "IPCH",
    "ISJ": "ISJ"
}

if normalize:
    for label, col in column_mapping.items():
        if col in df_plot:
            df_plot[f"{label}_norm"] = df_plot[col] / df_plot[col].iloc[0] * 100

# -------------------- 6. Affichage graphique --------------------
st.subheader("üìà √âvolution des courbes s√©lectionn√©es")

if graph_style == "üìà Interactif (Plotly)":
    data_to_plot = []

    for label in selected_curves:
        col = f"{label}_norm" if normalize else column_mapping[label]
        if col in df_plot:
            temp_df = df_plot[["Date", col]].copy()
            temp_df.columns = ["Date", "Valeur"]
            temp_df["Indice"] = label
            data_to_plot.append(temp_df)

    df_long = pd.concat(data_to_plot)

    fig = px.line(
        df_long,
        x="Date",
        y="Valeur",
        color="Indice",
        markers=True,
        title="√âvolution des indices et du SP95" + (" (base 100)" if normalize else "")
    )

    fig.update_layout(
        xaxis_title="Date",
        yaxis_title="Indice (base 100)" if normalize else "Taux / Prix (‚Ç¨)",
        legend_title="Courbes",
        hovermode="x unified"
    )

    st.plotly_chart(fig, use_container_width=True)

else:
    with plt.xkcd():
        fig, ax = plt.subplots(figsize=(12, 5))
        for label in selected_curves:
            col = f"{label}_norm" if normalize else column_mapping[label]
            ax.plot(df_plot["Date"], df_plot[col], label=label)  # Sans marker
        ax.set_title("√âvolution style XKCD (base 100)" if normalize else "√âvolution style XKCD")
        ax.set_xlabel("Date")
        ax.set_ylabel("Indice (base 100)" if normalize else "Taux / Prix (‚Ç¨)")
        ax.legend()
        plt.xticks(rotation=45)
        st.pyplot(fig)

# -------------------- 7. Donn√©es et export --------------------
st.subheader("üìã Donn√©es utilis√©es")
cols_to_show = ["Date"] + [column_mapping[c] for c in selected_curves if c != "SP95"] + (["Prix"] if "SP95" in selected_curves else [])
st.dataframe(df_plot[cols_to_show], use_container_width=True)

csv = df_plot[cols_to_show].to_csv(index=False).encode("utf-8")
st.download_button("üì• T√©l√©charger les donn√©es filtr√©es", data=csv, file_name="donnees_filtrees.csv", mime="text/csv")

# ---- DESCRIPTION DES INDICES ----
st.subheader("‚ÑπÔ∏è Description des indices IPCH, IPC, ISJ")

with st.expander("üìò Qu‚Äôest-ce que IPCH, IPC et ISJ ?", expanded=True):
    st.markdown("""
#### üî∏ **IPCH ‚Äì Indice des Prix √† la Consommation Harmonis√©**
- Indice **europ√©en** permettant de comparer l'inflation entre pays de l'UE.
- Calcul√© selon une m√©thode commune √† tous les √âtats membres.
- N‚Äôinclut pas certains √©l√©ments propres √† chaque pays (ex : loyers imput√©s).

#### üî∏ **IPC ‚Äì Indice des Prix √† la Consommation**
- Indice **national fran√ßais**, utilis√© comme r√©f√©rence officielle.
- Mesure l'√©volution des prix d‚Äôun panier moyen de consommation en France.
- Sert √† l‚Äô**indexation des salaires, retraites, loyers**, etc.

#### üî∏ **ISJ ‚Äì Indice Sp√©cifique des Jeunes**
- Variante de l'IPC adapt√©e au **mode de vie des jeunes de moins de 30 ans**.
- Panier sp√©cifique : plus orient√© vers le **logement, les transports, la technologie et l‚Äôalimentation**.
- Utile pour comprendre l‚Äôimpact de l‚Äôinflation sur cette tranche d‚Äô√¢ge.
""")
